<?xml version="1.0" encoding="UTF-8"?>
<session version="1.0">&#x0A;<refactoring comment="Extract local variable &apos;forName&apos; from expression &apos;Class.forName(&quot;lt.b.reflect.TestReflect&quot;)&apos;&#x0A;- Original project: &apos;thread&apos;&#x0A;- Variable name: &apos;forName&apos;&#x0A;- Destination method: &apos;lt.b.reflect.TestReflect.fun1()&apos;&#x0A;- Variable expression: &apos;Class.forName(&quot;lt.b.reflect.TestReflect&quot;)&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;forName&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;lt.b.reflect{TestReflect.java" name="forName" replace="true" selection="341 0" stamp="1508750795171" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;class1&apos; from expression &apos;sArr.getClass()&apos;&#x0A;- Original project: &apos;thread&apos;&#x0A;- Variable name: &apos;class1&apos;&#x0A;- Destination method: &apos;lt.b.reflect.TestReflect.fun2()&apos;&#x0A;- Variable expression: &apos;sArr.getClass()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;class1&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;lt.b.reflect{TestReflect.java" name="class1" replace="true" selection="398 0" stamp="1508751982385" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;name&apos; from expression &apos;class1.getName()&apos;&#x0A;- Original project: &apos;thread&apos;&#x0A;- Variable name: &apos;name&apos;&#x0A;- Destination method: &apos;lt.b.reflect.TestReflect.fun2()&apos;&#x0A;- Variable expression: &apos;class1.getName()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;name&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;lt.b.reflect{TestReflect.java" name="name" replace="true" selection="453 0" stamp="1508751992372" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;fields&apos; from expression &apos;class1.getFields()&apos;&#x0A;- Original project: &apos;thread&apos;&#x0A;- Variable name: &apos;fields&apos;&#x0A;- Destination method: &apos;lt.b.reflect.TestReflect.fun3()&apos;&#x0A;- Variable expression: &apos;class1.getFields()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;fields&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;lt.b.reflect{TestReflect.java" name="fields" replace="true" selection="921 0" stamp="1508764406659" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;declaredFields&apos; from expression &apos;class1.getDeclaredFields()&apos;&#x0A;- Original project: &apos;thread&apos;&#x0A;- Variable name: &apos;declaredFields&apos;&#x0A;- Destination method: &apos;lt.b.reflect.TestReflect.fun3()&apos;&#x0A;- Variable expression: &apos;class1.getDeclaredFields()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;declaredFields&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;lt.b.reflect{TestReflect.java" name="declaredFields" replace="true" selection="1001 0" stamp="1508764419730" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;fields&apos; from expression &apos;class1.getFields()&apos;&#x0A;- Original project: &apos;thread&apos;&#x0A;- Variable name: &apos;fields&apos;&#x0A;- Destination method: &apos;lt.b.reflect.TestReflect.fun4()&apos;&#x0A;- Variable expression: &apos;class1.getFields()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;fields&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;lt.b.reflect{TestReflect.java" name="fields" replace="true" selection="1205 0" stamp="1508764684738" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;declaredFields&apos; from expression &apos;class1.getDeclaredFields()&apos;&#x0A;- Original project: &apos;thread&apos;&#x0A;- Variable name: &apos;declaredFields&apos;&#x0A;- Destination method: &apos;lt.b.reflect.TestReflect.fun4()&apos;&#x0A;- Variable expression: &apos;class1.getDeclaredFields()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;declaredFields&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;lt.b.reflect{TestReflect.java" name="declaredFields" replace="true" selection="1289 0" stamp="1508764720890" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;field&apos; from expression &apos;class1.getField(&quot;childrenFieldA&quot;)&apos;&#x0A;- Original project: &apos;thread&apos;&#x0A;- Variable name: &apos;field&apos;&#x0A;- Destination method: &apos;lt.b.reflect.TestReflect.fun4()&apos;&#x0A;- Variable expression: &apos;class1.getField(&quot;childrenFieldA&quot;)&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;field&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;lt.b.reflect{TestReflect.java" name="field" replace="true" selection="1404 0" stamp="1508764794146" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;newInstance&apos; from expression &apos;class1.newInstance()&apos;&#x0A;- Original project: &apos;thread&apos;&#x0A;- Variable name: &apos;newInstance&apos;&#x0A;- Destination method: &apos;lt.b.reflect.TestReflect.fun4()&apos;&#x0A;- Variable expression: &apos;class1.newInstance()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;newInstance&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;lt.b.reflect{TestReflect.java" name="newInstance" replace="true" selection="1207 0" stamp="1508764835578" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;declaredField&apos; from expression &apos;class1.getDeclaredField(&quot;number&quot;)&apos;&#x0A;- Original project: &apos;thread&apos;&#x0A;- Variable name: &apos;declaredField&apos;&#x0A;- Destination method: &apos;lt.b.reflect.TestReflect.fun5()&apos;&#x0A;- Variable expression: &apos;class1.getDeclaredField(&quot;number&quot;)&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;declaredField&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;lt.b.reflect{TestReflect.java" name="declaredField" replace="true" selection="2160 0" stamp="1508765106376" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;declaredFields&apos; from expression &apos;class1.getDeclaredFields()&apos;&#x0A;- Original project: &apos;thread&apos;&#x0A;- Variable name: &apos;declaredFields&apos;&#x0A;- Destination method: &apos;lt.b.reflect.TestReflect.fun6()&apos;&#x0A;- Variable expression: &apos;class1.getDeclaredFields()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;declaredFields&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;lt.b.reflect{TestReflect.java" name="declaredFields" replace="true" selection="2388 0" stamp="1508767321107" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;modifiers&apos; from expression &apos;field.getModifiers()&apos;&#x0A;- Original project: &apos;thread&apos;&#x0A;- Variable name: &apos;modifiers&apos;&#x0A;- Destination method: &apos;lt.b.reflect.TestReflect.fun6()&apos;&#x0A;- Variable expression: &apos;field.getModifiers()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;modifiers&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;lt.b.reflect{TestReflect.java" name="modifiers" replace="true" selection="2477 0" stamp="1508767381589" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;string&apos; from expression &apos;Modifier.toString(modifiers)&apos;&#x0A;- Original project: &apos;thread&apos;&#x0A;- Variable name: &apos;string&apos;&#x0A;- Destination method: &apos;lt.b.reflect.TestReflect.fun6()&apos;&#x0A;- Variable expression: &apos;Modifier.toString(modifiers)&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;string&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;lt.b.reflect{TestReflect.java" name="string" replace="true" selection="2561 0" stamp="1508767395070" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;declaredFields&apos; from expression &apos;class1.getDeclaredFields()&apos;&#x0A;- Original project: &apos;thread&apos;&#x0A;- Variable name: &apos;declaredFields&apos;&#x0A;- Destination method: &apos;lt.b.reflect.TestReflect.fun7()&apos;&#x0A;- Variable expression: &apos;class1.getDeclaredFields()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;declaredFields&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;lt.b.reflect{TestReflect.java" name="declaredFields" replace="true" selection="2802 0" stamp="1508768709434" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;declaredMethods&apos; from expression &apos;class1.getDeclaredMethods()&apos;&#x0A;- Original project: &apos;thread&apos;&#x0A;- Variable name: &apos;declaredMethods&apos;&#x0A;- Destination method: &apos;lt.b.reflect.TestReflect.fun7()&apos;&#x0A;- Variable expression: &apos;class1.getDeclaredMethods()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;declaredMethods&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;lt.b.reflect{TestReflect.java" name="declaredMethods" replace="true" selection="2803 0" stamp="1508768782315" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;declaredMethod&apos; from expression &apos;class1.getDeclaredMethod(&quot;fun1&quot;,null)&apos;&#x0A;- Original project: &apos;thread&apos;&#x0A;- Variable name: &apos;declaredMethod&apos;&#x0A;- Destination method: &apos;lt.b.reflect.TestReflect.fun8()&apos;&#x0A;- Variable expression: &apos;class1.getDeclaredMethod(&quot;fun1&quot;,null)&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;declaredMethod&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;lt.b.reflect{TestReflect.java" name="declaredMethod" replace="true" selection="3140 0" stamp="1508769153666" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;class12&apos; from expression &apos;class1&apos;&#x0A;- Original project: &apos;thread&apos;&#x0A;- Variable name: &apos;class12&apos;&#x0A;- Destination method: &apos;lt.b.reflect.TestReflect.fun9()&apos;&#x0A;- Variable expression: &apos;class1&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;class12&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;lt.b.reflect{TestReflect.java" name="class12" replace="true" selection="3505 0" stamp="1508770413121" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;declaredMethod&apos; from expression &apos;class12.getDeclaredMethod(&quot;parseInt&quot;,String.class)&apos;&#x0A;- Original project: &apos;thread&apos;&#x0A;- Variable name: &apos;declaredMethod&apos;&#x0A;- Destination method: &apos;lt.b.reflect.TestReflect.fun9()&apos;&#x0A;- Variable expression: &apos;class12.getDeclaredMethod(&quot;parseInt&quot;,String.class)&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;declaredMethod&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;lt.b.reflect{TestReflect.java" name="declaredMethod" replace="true" selection="3585 0" stamp="1508770429705" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;invoke&apos; from expression &apos;declaredMethod.invoke(null,&quot;2222&quot;)&apos;&#x0A;- Original project: &apos;thread&apos;&#x0A;- Variable name: &apos;invoke&apos;&#x0A;- Destination method: &apos;lt.b.reflect.TestReflect.fun9()&apos;&#x0A;- Variable expression: &apos;declaredMethod.invoke(null,&quot;2222&quot;)&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;invoke&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;lt.b.reflect{TestReflect.java" name="invoke" replace="true" selection="3724 0" stamp="1508770469479" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;newInstance&apos; from expression &apos;class1.newInstance()&apos;&#x0A;- Original project: &apos;thread&apos;&#x0A;- Variable name: &apos;newInstance&apos;&#x0A;- Destination method: &apos;lt.b.reflect.TestReflect.fun10()&apos;&#x0A;- Variable expression: &apos;class1.newInstance()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;newInstance&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;lt.b.reflect{TestReflect.java" name="newInstance" replace="true" selection="3920 0" stamp="1508827226028" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;class12&apos; from expression &apos;class1&apos;&#x0A;- Original project: &apos;thread&apos;&#x0A;- Variable name: &apos;class12&apos;&#x0A;- Destination method: &apos;lt.b.reflect.TestReflect.fun10()&apos;&#x0A;- Variable expression: &apos;class1&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;class12&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;lt.b.reflect{TestReflect.java" name="class12" replace="true" selection="3989 0" stamp="1508827318726" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;constructor&apos; from expression &apos;class1.getConstructor(String.class,String.class)&apos;&#x0A;- Original project: &apos;thread&apos;&#x0A;- Variable name: &apos;constructor&apos;&#x0A;- Destination method: &apos;lt.b.reflect.TestReflect.fun10()&apos;&#x0A;- Variable expression: &apos;class1.getConstructor(String.class,String.class)&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;constructor&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;lt.b.reflect{TestReflect.java" name="constructor" replace="true" selection="4068 0" stamp="1508827337683" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;newInstance&apos; from expression &apos;constructor.newInstance(&quot;123&quot;,&quot;abc&quot;)&apos;&#x0A;- Original project: &apos;thread&apos;&#x0A;- Variable name: &apos;newInstance&apos;&#x0A;- Destination method: &apos;lt.b.reflect.TestReflect.fun10()&apos;&#x0A;- Variable expression: &apos;constructor.newInstance(&quot;123&quot;,&quot;abc&quot;)&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;newInstance&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;lt.b.reflect{TestReflect.java" name="newInstance" replace="true" selection="4175 0" stamp="1508827379313" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;constructors&apos; from expression &apos;class1.getConstructors()&apos;&#x0A;- Original project: &apos;thread&apos;&#x0A;- Variable name: &apos;constructors&apos;&#x0A;- Destination method: &apos;lt.b.reflect.TestReflect.fun10()&apos;&#x0A;- Variable expression: &apos;class1.getConstructors()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;constructors&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;lt.b.reflect{TestReflect.java" name="constructors" replace="true" selection="4413 0" stamp="1508827477479" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;instance&apos; from expression &apos;class1.isInstance(parent)&apos;&#x0A;- Original project: &apos;thread&apos;&#x0A;- Variable name: &apos;instance&apos;&#x0A;- Destination method: &apos;lt.b.reflect.TestReflect.fun11()&apos;&#x0A;- Variable expression: &apos;class1.isInstance(parent)&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;instance&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;lt.b.reflect{TestReflect.java" name="instance" replace="true" selection="4781 0" stamp="1508827779311" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;componentType&apos; from expression &apos;parents.getClass().getComponentType()&apos;&#x0A;- Original project: &apos;thread&apos;&#x0A;- Variable name: &apos;componentType&apos;&#x0A;- Destination method: &apos;lt.b.reflect.TestReflect.fun12()&apos;&#x0A;- Variable expression: &apos;parents.getClass().getComponentType()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;componentType&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;lt.b.reflect{TestReflect.java" name="componentType" replace="true" selection="5008 0" stamp="1508828079816" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;newInstance&apos; from expression &apos;Array.newInstance(String.class,10)&apos;&#x0A;- Original project: &apos;thread&apos;&#x0A;- Variable name: &apos;newInstance&apos;&#x0A;- Destination method: &apos;lt.b.reflect.TestReflect.fun12()&apos;&#x0A;- Variable expression: &apos;Array.newInstance(String.class,10)&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;newInstance&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;lt.b.reflect{TestReflect.java" name="newInstance" replace="true" selection="5144 0" stamp="1508828141381" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;typeParameters&apos; from expression &apos;class1.getTypeParameters()&apos;&#x0A;- Original project: &apos;thread&apos;&#x0A;- Variable name: &apos;typeParameters&apos;&#x0A;- Destination method: &apos;lt.b.reflect.TestReflect.fun13()&apos;&#x0A;- Variable expression: &apos;class1.getTypeParameters()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;typeParameters&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;lt.b.reflect{TestReflect.java" name="typeParameters" replace="true" selection="5457 0" stamp="1508829456680" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;declaredField&apos; from expression &apos;class1.getDeclaredField(&quot;root&quot;)&apos;&#x0A;- Original project: &apos;thread&apos;&#x0A;- Variable name: &apos;declaredField&apos;&#x0A;- Destination method: &apos;lt.b.reflect.TestReflect.fun14()&apos;&#x0A;- Variable expression: &apos;class1.getDeclaredField(&quot;root&quot;)&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;declaredField&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;lt.b.reflect{TestReflect.java" name="declaredField" replace="true" selection="5836 0" stamp="1508830057888" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;genericType&apos; from expression &apos;declaredField.getGenericType()&apos;&#x0A;- Original project: &apos;thread&apos;&#x0A;- Variable name: &apos;genericType&apos;&#x0A;- Destination method: &apos;lt.b.reflect.TestReflect.fun14()&apos;&#x0A;- Variable expression: &apos;declaredField.getGenericType()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;genericType&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;lt.b.reflect{TestReflect.java" name="genericType" replace="true" selection="5939 0" stamp="1508830086886" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;actualTypeArguments&apos; from expression &apos;parameterizedType.getActualTypeArguments()&apos;&#x0A;- Original project: &apos;thread&apos;&#x0A;- Variable name: &apos;actualTypeArguments&apos;&#x0A;- Destination method: &apos;lt.b.reflect.TestReflect.fun14()&apos;&#x0A;- Variable expression: &apos;parameterizedType.getActualTypeArguments()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;actualTypeArguments&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;lt.b.reflect{TestReflect.java" name="actualTypeArguments" replace="true" selection="6318 0" stamp="1508830270609" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;rawType&apos; from expression &apos;parameterizedType.getRawType()&apos;&#x0A;- Original project: &apos;thread&apos;&#x0A;- Variable name: &apos;rawType&apos;&#x0A;- Destination method: &apos;lt.b.reflect.TestReflect.fun14()&apos;&#x0A;- Variable expression: &apos;parameterizedType.getRawType()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;rawType&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;lt.b.reflect{TestReflect.java" name="rawType" replace="true" selection="6461 0" stamp="1508830408935" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;declaredMethod&apos; from expression &apos;class1.getDeclaredMethod(&quot;lowerEntry&quot;,Object.class)&apos;&#x0A;- Original project: &apos;thread&apos;&#x0A;- Variable name: &apos;declaredMethod&apos;&#x0A;- Destination method: &apos;lt.b.reflect.TestReflect.fun15()&apos;&#x0A;- Variable expression: &apos;class1.getDeclaredMethod(&quot;lowerEntry&quot;,Object.class)&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;declaredMethod&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;lt.b.reflect{TestReflect.java" name="declaredMethod" replace="true" selection="6640 0" stamp="1508830579235" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;genericParameterTypes&apos; from expression &apos;declaredMethod.getGenericParameterTypes()&apos;&#x0A;- Original project: &apos;thread&apos;&#x0A;- Variable name: &apos;genericParameterTypes&apos;&#x0A;- Destination method: &apos;lt.b.reflect.TestReflect.fun15()&apos;&#x0A;- Variable expression: &apos;declaredMethod.getGenericParameterTypes()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;genericParameterTypes&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;lt.b.reflect{TestReflect.java" name="genericParameterTypes" replace="true" selection="6757 0" stamp="1508830665039" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;newInstance&apos; from expression &apos;class1.newInstance()&apos;&#x0A;- Original project: &apos;thread&apos;&#x0A;- Variable name: &apos;newInstance&apos;&#x0A;- Destination method: &apos;lt.b.reflect.TestReflect.fun16()&apos;&#x0A;- Variable expression: &apos;class1.newInstance()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;newInstance&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;lt.b.reflect{TestReflect.java" name="newInstance" replace="true" selection="6955 0" stamp="1508846095047" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;declaredFields&apos; from expression &apos;class1.getDeclaredFields()&apos;&#x0A;- Original project: &apos;thread&apos;&#x0A;- Variable name: &apos;declaredFields&apos;&#x0A;- Destination method: &apos;lt.b.reflect.TestReflect.fun16()&apos;&#x0A;- Variable expression: &apos;class1.getDeclaredFields()&apos;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;declaredFields&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;lt.b.reflect{TestReflect.java" name="declaredFields" replace="true" selection="7008 0" stamp="1508846114427" version="1.0"/>&#x0A;<refactoring comment="Copy element &apos;com.springsource.net.sf.cglib-2.2.0.jar&apos; to &apos;interview&apos;&#x0A;- Original project: &apos;thread&apos;&#x0A;- Destination element: &apos;interview&apos;&#x0A;- Original element: &apos;com.springsource.net.sf.cglib-2.2.0.jar&apos;" description="Copy file" destination="=interview" element1="com.springsource.net.sf.cglib-2.2.0.jar" files="1" flags="589830" folders="0" id="org.eclipse.jdt.ui.copy" policy="org.eclipse.jdt.ui.copyResources" stamp="1508917056726" units="0" version="1.0"/>
</session>